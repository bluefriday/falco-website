- name: rules_file
  type: 리스트
  description: |
    규칙 파일의 위치. 여기에는 별도의 규칙 파일에 대한 하나 이상의 경로가 포함 될 수 있다. 다음 예는 동일하다.

    ```yaml
    rules_file:
    - path1
    - path2

    rules_file: [path1, path2]
    ```

    하나 이상의 `-r` 옵션을 통해 명령 줄에서 여러 규칙 파일을 지정할 수도 있다.
- name: time_format_iso_8601
  type: 불리언
  description: |
    `true` 인 경우(기본값은 `false`), 로그 메시지와 출력 메시지에 표시되는 시간은 ISO 8601 이다. 기본적으로 시간은 /etc/localtime 에 의해 관리되는 현지 시간대로 표시된다.
- name: json_output
  type: 불리언
  description: 알림 메시지에 JSON 출력을 사용할지의 여부이다.
- name: json_include_output_property
  type: 불리언
  description: |
    json 출력을 사용할 때, `output` 속성 자체(예: `쓰기(user=root ....)를 위해 열린 알려진 바이너리 디렉터리 하위의 파일`)을 JSON 출력에 포함할지의 여부
- name: log_stderr
  type: 불리언
  description: |
    만약 `true` 인 경우, 팔코의 활동을 설명하는 로그 메시지가 표준 에러에 기록된다. 이는 알림 메시지가 *아닌* 팔코 자체에 대한 로그 메시지이다.
- name: log_syslog
  type: 불리언
  description: |
    만약 `true` 인 경우, 팔코의 활동을 설명하는 로그 메시지가 syslog 에 기록된다.
- name: log_level
  type: |
    가능한 값이 있는 열거형: `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
  description: |
    로그에 포함할 최소 로그 수준. 참고: 이러한 수준은 규칙의 우선 순위 필드와는 별개이다. 이것은 팔코 내부 로깅의 로그 수준만을 나타낸다.
- name: priority
  type: |
    가능한 값이 있는 열거형: `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
  description: 로드(load) 및 실행할 최소 규칙의 우선순위 수준. 이 수준보다 더 심각한 우선 순위를 가진 모든 규칙이 불려지고 실행된다.
- name: syscall_event_drops
  type: |
    다음의 하위 키가 포함된 목록:
    
    * `actions`: 다음 부울 하위 키 중 하나 이상을 포함하는 목록:
      * `ignore`: 아무것도 하지 않는다. 빈 목록이 제공되면 무시로 간주된다.
      * `log`: 버퍼가 꽉 찼음을 알리는 CRITICAL 메시지를 기록한다.
      * `alert`: 버퍼가 꽉 찼음을 알리는 팔코 알림을 내보낸다.
      * `exit`: 0이 아닌 rc 값으로 팔코를 종료한다.
    * `rate`: 조치를 취할 수 있는 정상 상태의 비율. 초당 작업 단위이며, 기본값은 0.03333(30초당 하나의 작업)이다.
    * `max_burst`: 정상 상태 비율이 적용되기 전에 취할 수 있는 최대 조치의 수이다.
  description: 삭제된 [시스템 호출 이벤트에 대한 작업](https://falco.org/docs/event-sources/dropped-events/) 의 제어.
- name: buffered_outputs
  type: 불리언
  description: 아래 출력 채널 중 하나에 대한 출력이 버퍼링 되는지의 여부. 기본 값은 false 이다.
- name: outputs
  type: |
    다음의 하위 키가 포함된 목록:

    * `rate: <notifications/second>`
    * `outputs: max_burst: <number of messages>`
  description: |
    토큰 버킷으로 구현된 스로틀(throttling) 메커니즘은 팔코 알림 속도를 제한한다. 이 제한은 `rate` 및 `max_burst` 옵션으로 제어된다.

    `rate` 는 초당 획득 한 토큰 수(즉, 알림을 보낼 권리)이며 기본값은 1이다. `max_burst` 는 처리 중인 최대 토큰 수이며, 기본값은 1000이다.

    이러한 기본값을 사용하면, 팔코는 초기 무음 기간 후 최대 1000개의 알림을 보낼 수 있으며, 이후에는 초당 최대 1개의 알림을 보낼 수 있다. 1000초 동안 활동이 없으면 전체 버스트가 다시 발생한다.
- name: syslog_output
  type: |
    다음의 하위 키가 포함된 목록:

    * `enabled: [true|false]`
  description: |
    만약 `true` 이면, 팔코 알림이 syslog 를 통해 전송된다.
- name: file_output
  type: |
    다음의 하위 키가 포함된 목록:

    * `enabled: [true|false]`
    * `keep_alive: [true|false]`
    * `filename: <path>`
  description: |
    `enabled` 가 `true` 로 설정되면, 팔코 알림이 `filename` 에 지정된 파일 경로로 전송된다.

    만약 `keep_alive` 가 `false` (기본값)으로 설정된 경우, 팔코는 모든 경고에 대해 파일을 다시 열게된다. `true` 이면, 팔코는 한 번 열고 모든 경고에 대해 열어놓은 상태를 유지한다. 팔코 CLI 를 사용하여 `--unbuffered` 의 지정이 필요할 수도 있다.
- name: stdout_output
  type: |
    다음의 하위 키가 포함된 목록:

    * `enabled: [true|false]`
  description: |
    `enabled` 가 `true` 로 설정되면, 팔코 알림이 표준 출력(stdout)으로 전송된다.
- name: program_output
  type: |
    다음의 하위 키가 포함된 목록:

    * `enabled: [true|false]`
    * `keep_alive: [true|false]`
  description: |
    `enabled` 가 `true` 로 설정되면, 팔코 알림이 프로그램으로 전송된다.

    `keep_alive` 가 `false` (기본값)으로 설정된 경우, 각 알림에 대해 프로그램을 실행한다. `true` 이면, 팔코는 프로그램을 한 번 새엇ㅇ하고 모든 알림에 대해 열어둔다. 팔코 CLI 를 통하여 `--unbuffered` 의 지정이 필요할 수도 있다.

    `program` 설정은 각 알림에 대해 실행할 프로그램을 지정한다. 이것은 셸을 통해 시작되므로 추가 형식을 허용하는 명령 파이프라인을 지정할 수 있다.
- name: http_output
  type: |
    다음의 하위 키가 포함된 목록:

    * `enabled: [true|false]`
    * `url: [http[s]://path/to/webhook/]`
  description: |
    `0.15.0` 부터, enabled 가 true로 설정되면, 팔코 알림이 `url` 로 정의된 HTTP[s] URL 로 전송된다. 현재 이것은 차단 작업이며, 출력은 `keep_alive` 를 지원하지 않는다.
- name: webserver
  type: |
    다음의 하위 키가 포함된 목록:

    * `enabled: [true|false]`
    * `listen_port`
    * `k8s_audit_endpoint`
    * `ssl_enabled: [true|false]`
    * `ssl_certificate: <path>`
  description: |
    `enabled` 가 `true` 로 설정되면, 팔코는 쿠버네티스 감사(audit) 이벤트를 수락하기 위해 임베디드 웹 서버를 구동한다.

    `listen_port` 는 웹 서버가 수신할 포트를 지정한다. 기본값은 8765 이다.

    `k8s_audit_endpoint` 는 쿠버네티스 감사 이벤트를 수신할 URI를 지정한다. 기본값은 `/k8s-audit` 이다.

    `ssl_enabled` 은 `ssl_certificate` 에 지정된 인증서를 사용하여 웹서버에 대한 SSL 지원을 활성화한다. 지정된 `ssl_certificate` 파일에는 [civitweb 에서 문서화 한](https://github.com/civetweb/civetweb/blob/master/docs/OpenSSL.md#creating-a-self-signed-certificate)키와 함께 서버의 인증서가 포함되어야 한다.
- name: grpc
  type: |
    다음의 하위 키가 포함된 목록:

    * `enabled: [true|false]`
    * `bind_address`: [address:port|unix://<path>.sock]
    * `threadiness`: <integer>
    * `private_key: <path>`
    * `cert_chain: <path>`
    * `root_certs: <path>`
  description: |
    `enabled` 이 `true` 로 설정되면, 팔코는 gRPC API를 노출하기 위해 gRPC 서버를 추가한다. 기본값은 false 이다.

    gRPC 서버는 TLS 인증서를 사용하는 클라이언트와 서버 간의 [상호 인증](https://en.wikipedia.org/wiki/Mutual_authentication)에서만 사용할 수 있다. 인증서를 생성하는 방법은 [여기에 설명되어 있다](/docs/grpc/#generate-valid-ca).

    서버와 클라이언트 사이의 유일한 공통점은 루트 인증서라는 것을 항상 기억해야 한다. 모든 클라이언트는 서버와 동일한 루트 CA에서 서명한 자체 인증서를 생성해야 한다.

    `bind_address` 는 gRPC 서버가 수신할 주소와 포트를 지정한다. 기본값은 0.0.0.0:5060 이다.

    `threadiness` 는 gRPC 요청을 제고아는데, 사용할 스레드의 수를 정의한다. 또한 스레드 단위당 인수가 10배인 컨텍스트 수에 영향을 준다. 기본값은 8이다.

    서버 인증을 위한 `private_key` 개인 키의 경로이다. 기본값은 /etc/falco/certs/server.key 이다.

    서버 인증을 위한 공개 인증서의 `cert_chain` 경로이다. 기본값은 /etc/falco/certs/server.crt 이다.

    서버와 모든 클라이언트 간에 공통적인 CA 인증서(또는 체인)의 `root_certs` 경로이다. 기본값은 /etc/falco/certs/ca.crt 이다.

- name: grpc_output
  type: |
    다음의 하위 키가 포함된 목록:

    * `enabled: [true|false]`
  description: |
    `enabled` 이 `true` 로 설정되면, 팔코는 gRPC 서버에 대한 출력 수집을 시작한다. 출력 클라이언트와 함께 사용하는 것이 좋다. 출력 클라이언트의 예제는 [여기](https://github.com/falcosecurity/client-go/tree/master/examples/output)에서 참고한다. 
